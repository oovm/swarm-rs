@export
SwarmParser = {statements:SwarmStatements} $;

SwarmStatements =
	@:NamespaceDeclare |
	@:DefineDeclare

	;



NamespaceDeclare = "namespace" namespace:NamespaceNode;

DefineDeclare = "def" namespace:NamespaceNode [parameters:DefineArguments] body:BlockNode;

DefineArguments = '(' ')' | '(' args:DefineArgument [',' args:DefineArgument] ')';
DefineArgument = name:IdentifierNode [':' type:TypeNode] ['=' value:ExpressionNode ];


BlockNode = '{' '}' | '{' statements:BlockStatementNode [statements:BlockStatementNode] '}';
BlockStatementNode =
	@:NumberNode |
	@:StringNode
	;


TypeNode = id:IdentifierNode;

ExpressionNode = StringNode;


ValueNode =
	@:NumberNode |
	@:StringNode
	;


KeyValueNode = key:KeyNode ':' value:ValueNode;

@position
KeyNode =
	@:IdentifierNode |
	@:StringNode
	;

@position
StringNode = [hint:IdentifierNode] '\"' '\"';

@position
@no_skip_ws
NumberNode = num:Num [hint:IdentifierNode];

@string
@position
@no_skip_ws
Num = ['+'|'-'] {'0'..'9'}+ [Dot {'0'..'9'}+];

@position
NamespaceNode = path:IdentifierNode {NamespaceSplit path:IdentifierNode};
NamespaceSplit = '.' | '-' | '::';

@string
@position
@no_skip_ws
IdentifierNode = (XID_START | '_') {XID_CONTINUE};

@string
@position
SpecialNode = 'null' | 'default' | 'true' | 'false';


@char
@check(unicode_ident::is_xid_start)
XID_START = char;

@char
@check(unicode_ident::is_xid_continue)
XID_CONTINUE = char;

@char
Dot = '.' | '。';

@char
Split = ';' | ',' | '，';